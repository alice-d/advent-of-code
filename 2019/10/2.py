import math

#only the reachable ones
#x and y switched
asteroids = [[0, 4], [0, 10], [0, 12], [0, 16], [0, 17], [0, 28], [0, 36], [1, 5], [1, 9], [1, 10], [1, 11], [1, 12], [1, 15], [1, 16], [1, 20], [1, 27], [1, 37], [2, 1], [2, 3], [2, 7], [2, 18], [2, 24], [2, 26], [2, 27], [2, 35], [2, 39], [2, 42], [3, 1], [3, 4], [3, 16], [3, 19], [3, 22], [3, 24], [3, 32], [3, 33], [3, 34], [3, 35], [3, 41], [4, 0], [4, 1], [4, 4], [4, 22], [4, 26], [4, 37], [4, 38], [4, 40], [4, 41], [5, 0], [5, 3], [5, 4], [5, 6], [5, 10], [5, 16], [5, 17], [5, 19], [5, 22], [5, 26], [5, 29], [5, 32], [5, 37], [5, 42], [6, 0], [6, 1], [6, 5], [6, 19], [6, 21], [6, 32], [6, 36], [6, 42], [7, 0], [7, 2], [7, 5], [7, 6], [7, 8], [7, 10], [7, 13], [7, 15], [7, 19], [7, 25], [7, 27], [7, 41], [8, 3], [8, 6], [8, 7], [8, 12], [8, 21], [9, 0], [9, 1], [9, 6], [9, 7], [9, 8], [9, 11], [9, 13], [9, 21], [9, 25], [9, 36], [9, 39], [9, 42], [10, 4], [10, 6], [10, 11], [10, 12], [10, 16], [10, 17], [10, 18], [10, 25], [10, 32], [10, 36], [11, 9], [11, 11], [11, 17], [11, 20], [11, 29], [11, 32], [11, 35], [11, 36], [11, 39], [12, 4], [12, 5], [12, 9], [12, 12], [12, 13], [12, 17], [12, 23], [12, 24], [12, 26], [12, 29], [12, 34], [13, 12], [13, 17], [13, 18], [13, 19], [13, 20], [13, 21], [13, 22], [13, 29], [13, 30], [13, 37], [13, 41], [14, 0], [14, 12], [14, 13], [14, 17], [14, 19], [14, 26], [14, 31], [14, 36], [15, 6], [15, 12], [15, 14], [15, 19], [15, 23], [15, 24], [15, 26], [15, 27], [15, 28], [15, 34], [15, 38], [15, 40], [16, 2], [16, 8], [16, 9], [16, 20], [16, 31], [17, 2], [17, 4], [17, 7], [17, 14], [17, 21], [17, 27], [17, 31], [17, 32], [17, 40], [17, 41], [18, 1], [18, 4], [18, 9], [18, 10], [18, 17], [18, 31], [19, 2], [19, 3], [19, 5], [19, 11], [19, 21], [19, 26], [19, 27], [19, 28], [19, 38], [19, 41], [20, 3], [20, 8], [20, 12], [20, 14], [20, 22], [20, 26], [20, 28], [20, 34], [21, 3], [21, 4], [21, 5], [21, 6], [21, 15], [21, 19], [21, 24], [21, 29], [21, 38], [21, 39], [21, 42], [22, 1], [22, 13], [22, 31], [22, 35], [22, 39], [22, 42], [23, 0], [23, 17], [23, 24], [23, 27], [23, 39], [23, 42], [24, 2], [24, 4], [24, 12], [24, 24], [24, 26], [24, 33], [25, 4], [25, 17], [25, 31], [25, 33], [25, 34], [25, 35], [25, 36], [25, 38], [25, 40], [26, 5], [26, 6], [26, 11], [26, 14], [26, 26], [26, 27], [26, 28], [26, 37], [26, 41], [27, 1], [27, 7], [27, 11], [27, 13], [27, 17], [27, 20], [27, 31], [27, 34], [27, 36], [28, 1], [28, 3], [28, 4], [28, 8], [28, 17], [28, 20], [28, 24], [28, 25], [28, 29], [28, 33], [28, 37], [28, 39], [28, 41], [29, 0], [29, 8], [29, 12], [29, 16], [29, 17], [29, 18], [29, 21], [29, 26], [29, 29], [29, 33], [30, 5], [30, 9], [30, 10], [30, 14], [30, 16], [30, 17], [30, 18], [30, 20], [30, 24], [30, 25], [30, 36], [30, 37], [30, 39], [30, 40], [30, 41], [31, 2], [31, 8], [31, 10], [31, 11], [31, 14], [31, 20], [31, 23], [31, 29], [31, 34], [31, 39], [31, 42], [32, 5], [32, 11], [32, 26], [32, 27], [32, 28], [32, 29], [32, 31], [32, 41], [33, 2], [33, 5], [33, 7], [33, 10], [33, 16], [33, 27], [33, 30], [33, 35], [33, 40], [34, 0], [34, 6], [34, 8], [34, 15], [34, 16], [34, 22], [34, 26], [34, 30], [34, 38], [34, 40], [35, 2], [35, 3], [35, 5], [35, 6], [35, 18], [35, 29], [36, 3], [36, 6], [36, 7], [36, 12], [36, 16], [36, 17], [36, 20], [36, 21], [36, 28], [36, 37], [36, 42], [37, 5], [37, 16], [37, 17], [37, 19], [37, 21], [37, 22], [37, 25], [37, 30], [37, 31], [37, 34], [38, 1], [38, 5], [38, 9], [38, 16], [38, 19], [38, 21], [38, 22], [38, 28], [38, 32], [38, 38], [38, 39], [39, 3], [39, 4], [39, 6], [39, 11], [39, 23], [39, 24], [39, 25], [39, 26], [39, 28], [39, 33], [39, 35], [39, 40], [40, 3], [40, 8], [40, 10], [40, 13], [40, 23], [40, 31], [40, 34], [40, 38], [40, 39], [41, 3], [41, 4], [41, 19], [41, 26], [42, 24], [42, 29], [42, 30], [42, 33], [42, 42]]
#asteroids = [[0, 1], [0, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 4], [4, 3], [4, 4]]
#asteroids=[[0, 1], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 14], [1, 0], [1, 1], [1, 5], [1, 6], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 15], [1, 16], [2, 0], [2, 1], [2, 5], [2, 9], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [3, 2], [3, 8], [3, 12], [3, 13], [3, 14], [4, 2], [4, 4], [4, 10], [4, 15], [4, 16]]


#not switched
origin=[30,34]
#origin=[3,4]
#origin=[8, 3]


maxDetected=0
bestAst=[-1,-1]
detectedAst=[]

a=[origin[1],origin[0]]
    #print(a)
detects=0
for other in asteroids:
    #print(other)
    if other==a:
        continue
    found=False
    diff = [other[0]-a[0],other[1]-a[1]]
    if (abs(diff[0])==1 or abs(diff[1]==1)):
        found=False

    elif (abs(diff[0])==abs(diff[1])):
        ySignal=diff[1]//abs(diff[1])
        for i in range (ySignal,diff[1],ySignal):
            x = abs(i) * (diff[0]//abs(diff[0]))
            if( [a[0]+x,a[1]+i] in asteroids):
                found=True
                break

    elif (diff[0]==0):
        ySignal=diff[1]//abs(diff[1])
        for i in range (ySignal,diff[1],ySignal):
            if( [a[0],a[1]+i] in asteroids):
                found=True
                break
            
    elif (diff[1]==0):
        xSignal=diff[0]//abs(diff[0])
        for i in range (xSignal,diff[0],xSignal):
            if( [a[0]+i,a[1]] in asteroids):
                found=True
                break
  
    else:
        #equ: ax +by =c, a=diff1, b=-diff0
        aEq = diff[1]
        b = -diff[0]
        c=aEq*a[0]+b*a[1]
            #print(str(diff[1])+"*x + "+str(diff[0])+"*y = "+str(c))
        xSignal=diff[0]//abs(diff[0])
        ySignal=diff[1]//abs(diff[1])
        for xInc in range (xSignal,diff[0],xSignal):
                for yInc in range (ySignal,diff[1],ySignal):
                    x=a[0]+xInc
                    y=a[1]+yInc
                    if ( aEq*x + b*y == c):
                        if( [x,y] in asteroids):
                            found=True
    if (not found):
        detects+=1
        detectedAst.append(other)


asteroids=detectedAst

relativeCoords=[]
for a in asteroids:
    relativeCoords.append([a[1]-origin[0],a[0]-origin[1]])


count=0
#y = tan(angle) x
angles=[]
moreAngles=[]
for coord in relativeCoords:
    y=coord[1]
    x=coord[0]
    #print(str(yMul)+"*"+str(y)+"=m*"+str(x))
    if x==0 and y>0:
        angle =180
    elif x==0 and y<0:
        angle = 0
    else:
        m = y/x
        angle =  math.degrees(math.atan2(x,-y))#pk o y vai pa baixo
        if angle <0:
            angle+=360
    coord.append(angle)
    angles.append(angle)

def mysort(val): 
    return val[2]  
relativeCoords.sort(key= mysort)

finalOrder= []
for coord in relativeCoords:
    diff=coord[:2]
    newCord=[origin[0]+diff[0],origin[1]+diff[1]]
    finalOrder.append(newCord)
#print()
#print(finalOrder)

print(finalOrder[199])
